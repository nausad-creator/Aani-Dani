"use strict";
var infinite_scroll_1 = require('./infinite-scroll');
var axis_resolver_1 = require('./axis-resolver');
var core_1 = require('@angular/core');
describe('Infinite Scroll Directive', function () {
    // const zone = new NgZone({ enableLongStackTrace: false });
    var zone = jasmine.createSpyObj('zone', ['run']);
    var createMockElement = function () {
        var mockedElement = new core_1.ElementRef(document.createElement('div'));
        return mockedElement;
    };
    var createInfiniteScroll = function () {
        var mockedElement = createMockElement();
        var axis = new axis_resolver_1.AxisResolver();
        return new infinite_scroll_1.InfiniteScroll(mockedElement, zone, axis);
    };
    beforeEach(function () {
        spyOn(axis_resolver_1.AxisResolver, 'constructor').and.callFake(function () { });
    });
    it('should create an instance of the directive', function () {
        var actual = createInfiniteScroll();
        expect(actual).toBeDefined();
    });
    it('should have default @Input properties values', function () {
        var directive = createInfiniteScroll();
        var expectedInputs = {
            _distanceDown: 2,
            _distanceUp: 1.5,
            _throttle: 300,
            scrollWindow: true,
            _immediate: false,
            _horizontal: false,
            _alwaysCallback: false,
            _disabled: false
        };
        Object.keys(expectedInputs).forEach(function (input) {
            return expect(directive[input]).toEqual(expectedInputs[input]);
        });
    });
    it('should trigger the onScrollDown event when scroll has passed _distandDown', function () {
        var directive = createInfiniteScroll();
        spyOn(directive, 'onScrollDown');
        directive.ngOnInit();
        spyOn(directive.scroller, 'calculatePoints').and.callFake(function () {
            return { height: 150, scrolledUntilNow: 75, totalToScroll: 150 };
        });
        directive.scroller.handler();
        expect(directive.scroller.calculatePoints).toHaveBeenCalled();
        expect(directive.onScrollDown).toHaveBeenCalled();
    });
    it('should trigger the onScrollUp event when scroll has passed _distanceUp', function () {
        var directive = createInfiniteScroll();
        spyOn(directive, 'onScrollUp');
        directive.ngOnInit();
        spyOn(directive.scroller, 'calculatePoints').and.callFake(function () {
            return { height: 150, scrolledUntilNow: 30, totalToScroll: 150 };
        });
        directive.scroller.lastScrollPosition = 50;
        directive.scroller.handler();
        expect(directive.scroller.calculatePoints).toHaveBeenCalled();
        expect(directive.onScrollUp).toHaveBeenCalled();
    });
    it('should disable the scroller', function () {
        var directive = createInfiniteScroll();
        var changes = {
            '_disabled': new core_1.SimpleChange(false, true)
        };
        // spyOn(directive, 'onScrollUp');
        directive.ngOnInit();
        directive.ngOnChanges(changes);
        var expected = false;
        var actual = directive.scroller.scrollEnabled;
        expect(actual).toBe(expected);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmZpbml0ZS1zY3JvbGwuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsZ0NBQStCLG1CQUFtQixDQUFDLENBQUE7QUFDbkQsOEJBQTZCLGlCQUFpQixDQUFDLENBQUE7QUFFL0MscUJBQWdFLGVBQWUsQ0FBQyxDQUFBO0FBRWhGLFFBQVEsQ0FBQywyQkFBMkIsRUFBRTtJQUNwQyw0REFBNEQ7SUFDNUQsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ25ELElBQU0saUJBQWlCLEdBQUc7UUFDeEIsSUFBTSxhQUFhLEdBQWUsSUFBSSxpQkFBVSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLENBQUMsYUFBYSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztJQUVGLElBQU0sb0JBQW9CLEdBQUc7UUFDM0IsSUFBTSxhQUFhLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztRQUMxQyxJQUFNLElBQUksR0FBaUIsSUFBSSw0QkFBWSxFQUFFLENBQUM7UUFDOUMsTUFBTSxDQUFDLElBQUksZ0NBQWMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQztJQUVGLFVBQVUsQ0FBQztRQUNULEtBQUssQ0FBQyw0QkFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRTtRQUMvQyxJQUFNLE1BQU0sR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRTtRQUNqRCxJQUFNLFNBQVMsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3pDLElBQU0sY0FBYyxHQUFHO1lBQ3JCLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLFdBQVcsRUFBRSxHQUFHO1lBQ2hCLFNBQVMsRUFBRSxHQUFHO1lBQ2QsWUFBWSxFQUFFLElBQUk7WUFDbEIsVUFBVSxFQUFFLEtBQUs7WUFDakIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztRQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUN2QyxPQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQXZELENBQXVELENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyRUFBMkUsRUFBRTtRQUM5RSxJQUFNLFNBQVMsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3pDLEtBQUssQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDakMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JCLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztZQUN4RCxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDbkUsQ0FBQyxDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDOUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdFQUF3RSxFQUFFO1FBQzNFLElBQU0sU0FBUyxHQUFHLG9CQUFvQixFQUFFLENBQUM7UUFDekMsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMvQixTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDckIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO1lBQ3hELE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNuRSxDQUFDLENBQUMsQ0FBQztRQUNILFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBQzNDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM5RCxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUU7UUFDaEMsSUFBTSxTQUFTLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztRQUN6QyxJQUFNLE9BQU8sR0FBa0I7WUFDN0IsV0FBVyxFQUFFLElBQUksbUJBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1NBQzNDLENBQUM7UUFDRixrQ0FBa0M7UUFDbEMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JCLFNBQVMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFzeW5jLFxuICBpbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEluZmluaXRlU2Nyb2xsIH0gZnJvbSAnLi9pbmZpbml0ZS1zY3JvbGwnO1xuaW1wb3J0IHsgQXhpc1Jlc29sdmVyIH0gZnJvbSAnLi9heGlzLXJlc29sdmVyJztcblxuaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBTaW1wbGVDaGFuZ2VzLCBTaW1wbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZGVzY3JpYmUoJ0luZmluaXRlIFNjcm9sbCBEaXJlY3RpdmUnLCAoKSA9PiB7XG4gIC8vIGNvbnN0IHpvbmUgPSBuZXcgTmdab25lKHsgZW5hYmxlTG9uZ1N0YWNrVHJhY2U6IGZhbHNlIH0pO1xuICBjb25zdCB6b25lID0gamFzbWluZS5jcmVhdGVTcHlPYmooJ3pvbmUnLCBbJ3J1biddKTtcbiAgY29uc3QgY3JlYXRlTW9ja0VsZW1lbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgbW9ja2VkRWxlbWVudDogRWxlbWVudFJlZiA9IG5ldyBFbGVtZW50UmVmKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICByZXR1cm4gbW9ja2VkRWxlbWVudDtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVJbmZpbml0ZVNjcm9sbCA9ICgpID0+IHtcbiAgICBjb25zdCBtb2NrZWRFbGVtZW50ID0gY3JlYXRlTW9ja0VsZW1lbnQoKTtcbiAgICBjb25zdCBheGlzOiBBeGlzUmVzb2x2ZXIgPSBuZXcgQXhpc1Jlc29sdmVyKCk7XG4gICAgcmV0dXJuIG5ldyBJbmZpbml0ZVNjcm9sbChtb2NrZWRFbGVtZW50LCB6b25lLCBheGlzKTtcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+e1xuICAgIHNweU9uKEF4aXNSZXNvbHZlciwgJ2NvbnN0cnVjdG9yJykuYW5kLmNhbGxGYWtlKCgpID0+IHt9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIGRpcmVjdGl2ZScsICgpID0+IHtcbiAgICBjb25zdCBhY3R1YWwgPSBjcmVhdGVJbmZpbml0ZVNjcm9sbCgpO1xuICAgIGV4cGVjdChhY3R1YWwpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGF2ZSBkZWZhdWx0IEBJbnB1dCBwcm9wZXJ0aWVzIHZhbHVlcycsICgpID0+IHtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBjcmVhdGVJbmZpbml0ZVNjcm9sbCgpO1xuICAgIGNvbnN0IGV4cGVjdGVkSW5wdXRzID0ge1xuICAgICAgX2Rpc3RhbmNlRG93bjogMixcbiAgICAgIF9kaXN0YW5jZVVwOiAxLjUsXG4gICAgICBfdGhyb3R0bGU6IDMwMCxcbiAgICAgIHNjcm9sbFdpbmRvdzogdHJ1ZSxcbiAgICAgIF9pbW1lZGlhdGU6IGZhbHNlLFxuICAgICAgX2hvcml6b250YWw6IGZhbHNlLFxuICAgICAgX2Fsd2F5c0NhbGxiYWNrOiBmYWxzZSxcbiAgICAgIF9kaXNhYmxlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXMoZXhwZWN0ZWRJbnB1dHMpLmZvckVhY2goaW5wdXQgPT5cbiAgICAgIGV4cGVjdChkaXJlY3RpdmVbaW5wdXRdKS50b0VxdWFsKGV4cGVjdGVkSW5wdXRzW2lucHV0XSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRyaWdnZXIgdGhlIG9uU2Nyb2xsRG93biBldmVudCB3aGVuIHNjcm9sbCBoYXMgcGFzc2VkIF9kaXN0YW5kRG93bicsICgpID0+IHtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBjcmVhdGVJbmZpbml0ZVNjcm9sbCgpO1xuICAgIHNweU9uKGRpcmVjdGl2ZSwgJ29uU2Nyb2xsRG93bicpO1xuICAgIGRpcmVjdGl2ZS5uZ09uSW5pdCgpO1xuICAgIHNweU9uKGRpcmVjdGl2ZS5zY3JvbGxlciwgJ2NhbGN1bGF0ZVBvaW50cycpLmFuZC5jYWxsRmFrZSgoKSA9PiB7XG4gICAgICByZXR1cm4geyBoZWlnaHQ6IDE1MCwgc2Nyb2xsZWRVbnRpbE5vdzogNzUsIHRvdGFsVG9TY3JvbGw6IDE1MCB9O1xuICAgIH0pO1xuICAgIGRpcmVjdGl2ZS5zY3JvbGxlci5oYW5kbGVyKCk7XG4gICAgZXhwZWN0KGRpcmVjdGl2ZS5zY3JvbGxlci5jYWxjdWxhdGVQb2ludHMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3QoZGlyZWN0aXZlLm9uU2Nyb2xsRG93bikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRyaWdnZXIgdGhlIG9uU2Nyb2xsVXAgZXZlbnQgd2hlbiBzY3JvbGwgaGFzIHBhc3NlZCBfZGlzdGFuY2VVcCcsICgpID0+IHtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBjcmVhdGVJbmZpbml0ZVNjcm9sbCgpO1xuICAgIHNweU9uKGRpcmVjdGl2ZSwgJ29uU2Nyb2xsVXAnKTtcbiAgICBkaXJlY3RpdmUubmdPbkluaXQoKTtcbiAgICBzcHlPbihkaXJlY3RpdmUuc2Nyb2xsZXIsICdjYWxjdWxhdGVQb2ludHMnKS5hbmQuY2FsbEZha2UoKCkgPT4ge1xuICAgICAgcmV0dXJuIHsgaGVpZ2h0OiAxNTAsIHNjcm9sbGVkVW50aWxOb3c6IDMwLCB0b3RhbFRvU2Nyb2xsOiAxNTAgfTtcbiAgICB9KTtcbiAgICBkaXJlY3RpdmUuc2Nyb2xsZXIubGFzdFNjcm9sbFBvc2l0aW9uID0gNTA7XG4gICAgZGlyZWN0aXZlLnNjcm9sbGVyLmhhbmRsZXIoKTtcbiAgICBleHBlY3QoZGlyZWN0aXZlLnNjcm9sbGVyLmNhbGN1bGF0ZVBvaW50cykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChkaXJlY3RpdmUub25TY3JvbGxVcCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRpc2FibGUgdGhlIHNjcm9sbGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGNyZWF0ZUluZmluaXRlU2Nyb2xsKCk7XG4gICAgY29uc3QgY2hhbmdlczogU2ltcGxlQ2hhbmdlcyA9IHtcbiAgICAgICdfZGlzYWJsZWQnOiBuZXcgU2ltcGxlQ2hhbmdlKGZhbHNlLCB0cnVlKVxuICAgIH07XG4gICAgLy8gc3B5T24oZGlyZWN0aXZlLCAnb25TY3JvbGxVcCcpO1xuICAgIGRpcmVjdGl2ZS5uZ09uSW5pdCgpO1xuICAgIGRpcmVjdGl2ZS5uZ09uQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICBjb25zdCBleHBlY3RlZCA9IGZhbHNlO1xuICAgIGNvbnN0IGFjdHVhbCA9IGRpcmVjdGl2ZS5zY3JvbGxlci5zY3JvbGxFbmFibGVkO1xuICAgIGV4cGVjdChhY3R1YWwpLnRvQmUoZXhwZWN0ZWQpO1xuICB9KVxufSlcbiJdfQ==